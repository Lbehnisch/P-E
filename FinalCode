

#include <Wire.h>
#include <MIDI.h>
#include <ZX_Sensor.h>
MIDI_CREATE_INSTANCE(HardwareSerial, Serial, MIDI);
// Constants
const int ZX_ADDR = 0x10;  // ZX Sensor I2C address

// Global Variables
ZX_Sensor zx_sensor = ZX_Sensor(ZX_ADDR);
uint8_t x_pos;
uint8_t z_pos;
int last_x_pos = 0;
int last_z_pos = 0;

GestureType gesture;
uint8_t gesture_speed;

int midi_channel = 1;

enum Mode {
  CC,
  Note,
  Configure
};
Mode currentMode = Note;

const int CCLight = 12;
const int NoteLight = 13;

void setup() {


  pinMode(CCLight, OUTPUT);
  pinMode(NoteLight, OUTPUT);


  MIDI.begin();          // Launch MIDI and listen to defined midi channel
  Serial.begin(9600);
  while (!Serial);
  Init();
}

void loop() {

  if (currentMode == Note) {
    SendNotes();
  }
  if (currentMode == CC) {
    SendCC();
  }
  else if (currentMode == Configure) {
    ConfigureMode();
  }

  if (currentMode != Configure) {
    CheckForGestures();
  }

  ToggleLights();
}


void ConfigureMode() {

  if ( zx_sensor.gestureAvailable() ) {
    gesture = zx_sensor.readGesture();
    gesture_speed = zx_sensor.readGestureSpeed();
    switch ( gesture ) {
      case NO_GESTURE:
        break;
      case RIGHT_SWIPE:
        if (midi_channel < 16) {
          midi_channel++;
        }
        break;
      case LEFT_SWIPE:
        if (midi_channel > 1) {
          midi_channel--;
        }
        break;
      case UP_SWIPE:
        currentMode = CC;
      default:
        break;
    }
  }

}

void SendNotes() {

  if ( zx_sensor.positionAvailable() ) {
    x_pos = zx_sensor.readX();
    if ( x_pos != ZX_ERROR ) {
      //Serial.print("X: ");
      //Serial.print(x_pos);
    }
    z_pos = zx_sensor.readZ();
    if ( z_pos != ZX_ERROR ) {
      if (z_pos != last_z_pos)
      {
        MIDI.sendNoteOn(z_pos, 127, midi_channel);
        // delay(100);
        // MIDI.sendNoteOff(z_pos, 127, midi_channel);
      }
      last_z_pos = z_pos;
    }
  }
}

void SendCC() {
  if ( zx_sensor.positionAvailable() ) {  //check if sensur is interrupted
  x_pos = zx_sensor.readX();        //Read x position of the sensor
  if ( x_pos != ZX_ERROR ) {      
      
  int ccX = constrain(x_pos, 0, 127);
  MIDI.sendControlChange(3, ccX, midi_channel);   
    }
 
    
    z_pos = zx_sensor.readZ();
    if ( z_pos != ZX_ERROR ) {
    if (z_pos != last_z_pos)
      {
     
        int cc = constrain(z_pos, 0, 127);
        MIDI.sendControlChange(2, cc, midi_channel);
      }
      z_pos = last_z_pos;
    }
  }
}


void CheckForGestures() {
  if ( zx_sensor.gestureAvailable() ) {
    gesture = zx_sensor.readGesture();
    gesture_speed = zx_sensor.readGestureSpeed();
    switch ( gesture ) {
      case NO_GESTURE:
        break;
      case RIGHT_SWIPE:
        //    if (gesture_speed < 5) {
        currentMode = Note;
        //   }
        break;
      case LEFT_SWIPE:
        //   if (gesture_speed < 5) {
        currentMode = CC;
        //    }
        break;
      case UP_SWIPE:
        //if (gesture_speed < 4) {
          currentMode = Configure;
    //    }
      default:
        break;
    }
  }
}
void Init() {
  Serial.println();
  Serial.println("-----------------------------------");
  Serial.println("Midi Device with ZX Sensor");
  Serial.println("By Sandor Daemen");
  Serial.println("-----------------------------------");

  uint8_t ver;
  // Initialize ZX Sensor (configure I2C and read model ID)
  if ( zx_sensor.init() ) {
    Serial.println("ZX Sensor initialization complete");
  } else {
    Serial.println("Something went wrong during ZX Sensor init!");
  }
  // Read the model version number and ensure the library will work
  ver = zx_sensor.getModelVersion();
  if ( ver == ZX_ERROR ) {
    Serial.println("Error reading model version number");
  } else {
    Serial.print("Model version: ");
    Serial.println(ver);
  }
  if ( ver != ZX_MODEL_VER ) {
    Serial.print("Model version needs to be ");
    Serial.print(ZX_MODEL_VER);
    Serial.print(" to work with this library. Stopping.");
    while (1);
  }

  // Read the register map version and ensure the library will work
  ver = zx_sensor.getRegMapVersion();
  if ( ver == ZX_ERROR ) {
    Serial.println("Error reading register map version number");
  } else {
    Serial.print("Register Map Version: ");
    Serial.println(ver);
  }
  if ( ver != ZX_REG_MAP_VER ) {
    Serial.print("Register map version needs to be ");
    Serial.print(ZX_REG_MAP_VER);
    Serial.print(" to work with this library. Stopping.");
    while (1);
  }
}
/*BACKUP*/
void MIDImessage(byte command, byte data1, byte data2) //pass values out through standard Midi Command
{
  Serial.write(command);
  Serial.write(data1);
  Serial.write(data2);
}
